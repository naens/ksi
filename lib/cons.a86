;****h* ksi/cons
;  NAME
;    ksi - console I/O module
;  DESCRIPTION
;    This module contains functions that perform console Input and
;    Output.
;******


public print_char, print_string, print_line, new_line
public print_hex_byte, print_hex_word, print_integer
public read_key, read_line
public read_hex, read_integer

extrn os_print_char:near, os_new_line:near
extrn os_read_key:near, os_read_line:near
extrn parse_hex:near, parse_integer:near, to_integer_string:near


;****f* cons/print_char, print_string, print_line, new_line
;  NAME
;    print_char, print_string, print_line, new_line - functions
;        to print strings and characters
;  SYNOPSIS
;    print_char: procedure (char)
;    print_string: procedure (pstr)
;    print_line: procedure (pstr)
;    new_line: procedure
;  DESCRIPTION
;    These functions print characters or strings and do not return
;    anything.
;    * print_char prints a single character
;    * print_string prints a 0h terminated string
;    * print_line prints a 0h terminated string and goes to the new
;      line
;    * new_line simply goes to the new line without actually printing
;      any visible character
;  RETURN VALUE
;    These functions do not return any value.
;******


; print_char: output a single character on the console
print_char:
	; parameters:
	;	char	in 4[bp] (byte)
	push	bp
	mov	bp, sp

	; call the os function for printing a character
	mov	al, 4[bp]
	push	ax
	call	os_print_char

	pop	bp
	ret	2


; print_string: procedure (pstr)
	dseg
ps_ptr	rw	1

	cseg
print_string:
	; parameters:
	;	pstr in 4[bp]
	; static variable:
	;	ps_ptr: pointer to the current location in the string
	push	bp
	mov	bp, sp

	; initialize the pointer to the string to print
	mov	ax, 4[bp]		; pstr
	mov	ps_ptr, ax

	; print character at [ps_ptr], and advance ps_ptr
ps_loop:
	mov	bx, ps_ptr
	cmp	byte ptr [bx], 0
	je	ps_loop_end
	push	word ptr [bx]
	call	os_print_char
	inc	ps_ptr
	jmp	ps_loop
ps_loop_end:

	pop	bp
	ret	2


; print_line: prints a string followed by a new line
print_line:
	; parameters:
	;	pstr	in 4[bp]
	push	bp
	mov	bp, sp

	mov	ax, 4[bp]		; pstr
	push	ax
	call	print_string
	call	os_new_line

	pop	bp
	ret	2


; new_line: print new line
new_line:
	push	bp
	mov	bp, sp

	call	os_new_line

	pop	bp
	ret


;****f* cons/print_hex_byte, print_hex_word, print_integer
;  NAME
;    print_hex_byte, print_hex_word, print_integer - print a number
;  SYNOPSIS
;    print_hex_byte: procedure (b)
;    print_hex_word: procedure (w)
;    print_integer: procedure (num)
;  DESCRIPTION
;    These functions print the number given as argument to the console.
;    The _hex_ functions print an unsigned number as hexadecimal with
;    leading zeros if needed.
;    The width of the number printed by print_hex_byte is 2 characters,
;    and print_hex_word prints the number using 4 characters.
;    The function print_integer prints a signed decimal number,
;    prefixed with a minus sign if it's negative, and it does not
;    print leading zeros.
;  RETURN VALUE
;    These functions do not return any value.
;******

prnibble:
	; parameters:
	;	nibble	in 4[bp]
	push	bp
	mov	bp, sp

	mov	al, 4[bp]		; nibble
	add	al, '0'
	cmp	al, 10 + '0'
	jb	pn_num
	add	al, 'a' - '0' - 10
pn_num:
	push	ax
	call	os_print_char

	pop	bp
	ret	2

print_hex_byte:
	; parameters:
	;	byte	in 4[bp]
	push	bp
	mov	bp, sp

	; print higher nibble
	mov	al, 4[bp]		; byte
	mov	cl, 4
	shr	al, cl
	push	ax
	call	prnibble

	; print lower nibble
	mov	al, 4[bp]		; byte
	and	al, 0fh
	push	ax
	call	prnibble

	pop	bp
	ret	2


print_hex_word:
	; parameters:
	;	word	in 4[bp]
	push	bp
	mov	bp, sp

	; print higher byte of the word
	mov	ax, 4[bp]		; word
	mov	al, ah
	push	ax
	call	print_hex_byte

	; print lower byte of the word
	mov	ax, 4[bp]		; word
	push	ax
	call	print_hex_byte

	pop	bp
	ret	2


; print:integer: print a signed integer to the console
		dseg
pi_buf	rb	7

		cseg
print_integer:
	; parameters:
	;	number	in 4[bp]
	push	bp
	mov	bp, sp

	mov	ax, 4[bp]		; pi_number
	push	ax
	mov	ax, offset pi_buf
	push	ax
	call	to_integer_string

	mov	ax, offset pi_buf
	push	ax
	call	print_string

	pop	bp
	ret	2


;****f* cons/read_key, read_line
;  NAME
;    read_key, read_line - functions to read from the console
;  SYNOPSIS
;    read_key: procedure byte
;    read_line: procedure (length, pbuf) integer
;  DESCRIPTION
;    * read_key reads one character from standard input without
;      needing new line to be entered.
;    * read_line reads a line from standard input of maximum length
;      and returns the length read.  The string is always null-
;      terminated.
;  RETURN VALUE
;    The return value of read_key is the character entered.  If shift
;    or Control keys were pressed when entered the character, the
;    value is modified accordingly.
;    The return value of the read_line function is the length of the
;    line entered.  It cannot be greater than length - 1 and is
;    terminated by a zero byte.
;******


; read_key: reads a single character from the console
read_key:
	push	bp
	mov	bp, sp

	call	os_read_key

	pop	bp
	ret


; read_line: reads a line from the console into buffer, returns the
;    length of the string read
read_line:
	; parameters:
	;	length	in 6[bp]
	;	pbuf	in 4[bp]
	; returns:
	;	length	in ax
	push	bp
	mov	bp, sp

	mov	ax, 6[bp]		; length
	push	ax
	mov	ax, 4[bp]		; pbuf
	push	ax
	call	os_read_line

	pop	bp
	ret	4


;****f* cons/read_hex, read_integer
;  NAME
;    read_hex, read_integer - read a number from the console
;  SYNOPSIS
;    read_hex: procedure (pnum)
;    read_integer: procedure (pnum)
;  DESCRIPTION
;    These two function read a hexadecimal or a decimal number from
;    the console respectively and store it in the location pointed
;    by the pnum parameter.
;  RETURN VALUE
;    These function do not return any value.
;******


; read_hex: read a number from the console into pnum
		dseg
rh_bufsz	equ	14
rh_buf		rs	rh_bufsz
rh_num		rw	1

		cseg
read_hex:
	; parameters:
	;	pnum	in 4[bp]
	push	bp
	mov	bp, sp

	; read one line into rh_buf
	mov	ax, rh_bufsz
	push	ax
	mov	ax, offset rh_buf
	push	ax
	call	read_line

	; parse the hexadecimal string, convert to integer
	mov	ax, offset rh_buf
	push	ax
	mov	ax, offset rh_num
	push	ax
	call	parse_hex

	; store the number read in the location given by pnum
	mov	bx, 4[bp]		; pnum
	mov	ax, rh_num
	mov	[bx], ax

	pop	bp
	ret	2

; read_integer: read an integer number from the console and store it
		dseg
ri_bufsz	equ	15
ri_buf		rs	ri_bufsz
ri_num		rw	1

		cseg
read_integer:
	; parameters:
	;	pnum	in 4[bp]
	push	bp
	mov	bp, sp

	; read a string of max size ri_bufsz into ri_buf
	mov	ax, ri_bufsz
	push	ax
	mov	ax, offset ri_buf
	push	ax
	call	read_line

	; convert the string in ri_buf into a number, store in ri_num
	mov	ax, offset ri_buf
	push	ax
	mov	ax, offset ri_num
	push	ax
	call	parse_integer

	; write the number to the location pointed by 4[bp]
	mov	bx, 4[bp]		; pnum
	mov	ax, ri_num
	mov	[bx], ax

	pop	bp
	ret	2


end
