;****h* ksi/str
;  NAME
;    str - the string handling module
;  DESCRIPTION
;    This module contains functions related to the handling of the
;    strings.  It contains, for example, functions for comparison,
;    conversion, copying and other.
;******


public string_compare, string_length, string_copy
public parse_hex, parse_integer, to_hex_string, to_integer_string

;****f* str/string_compare, string_length, string_copy
;  NAME
;    string_compare, string_length, string_copy - functions for
;        string comparison, length and copying
;  SYNOPSIS
;    string_compare: procedure (pstr1, pstr2): integer
;    string_length: procedure (pstr): word
;    string_copy: procedure (psrc, pdest, n): word
;  DESCRIPTION
;    The function string_compare performs a comparison on strings and
;    returns 0 if they are equal.  Otherwise, a positive value if
;    pstr1 is greater in character codes, otherwise, returns a negative
;    value.
;    The function string_length determines the length of a
;    null-terminated string.
;    string_copy copies the string from psrc to pdest, with the limit
;    of n characters.
;  RETURN VALUE
;    string_compare: returns the result of the comparison of the two
;    strings, 0 if they are equal, a negative value if the first
;    of the two strings is before the second in ASCII ordering, and
;    a positive value otherwise.
;    string_length returns the length of the string.
;    string_copy returns the number of characters copied.
;******


string_compare:
	push	bp
	mov	bp, sp

	mov	si, 6[bp]		; pstr1
	mov	di, 4[bp]		; pstr2

scmp_loop:
	mov	al, [si]
	sub	al, [di]
	jne	scmp_loop_end
	inc	si
	inc	di
	jmp	scmp_loop
scmp_loop_end:
	cbw
	pop	bp
	ret	4

string_length:
	push	bp
	mov	bp, sp
	mov	si, 0
	mov	bx, 4[bp]		; pstr
sl_loop:
	cmp	byte ptr [bx+si], 0
	je	sl_loop_end
	inc	si
	jmp	sl_loop
sl_loop_end:
	mov	ax, si
	pop	bp
	ret	2

string_copy:
	; parameters:
	;	psrc	in 8[bp]
	;	pdest	in 6[bp]
	;	n	in 4[bp]
	push	bp
	mov	bp, sp

	mov	si, 8[bp]		; psrc
	mov	di, 6[bp]		; pdest
	mov	cx, 4[bp]		; n

scpy_loop:
	cmp	cx, 0
	je	scpy_loop_end
	cmp	byte ptr [si], 0
	jne	scpy_loop_lbl
	mov	byte ptr [di], 0
	jmp	scpy_loop_end
scpy_loop_lbl:
	mov	al, [si]
	mov	[di], al
	inc	si
	inc	di
	jmp	scpy_loop
scpy_loop_end:

	mov	ax, 4[bp]		; n
	sub	ax, cx
	pop	bp
	ret	6


;****f* str/parse_hex, parse_integer
;  NAME
;    parse_hex, parse_integer - parse strings, convert to numbers
;  SYNOPSIS
;    parse_hex: procedure (pstr, pnum)
;    parse_integer: procedure (pstr, pnum)
;  DESCRIPTION
;    The parse functions parse hexadecimal and decimal strings and
;    put the result in pnum.  The parse_hex function parses an
;    unsigned hexadecimal number, and the parse_integer parses a
;    isgned decimal number.
;  RETURN VALUE
;    These functions do not return any value.
;******

; parse_hex: parse an unsigned hexadecimal string into a word
parse_hex:
	; parameters
	;	pstr	in 6[bp]
	;	pnum	in 4[bp]
	push	bp
	mov	bp, sp

	mov	cl, 4			; shift amount
	mov	dx, 0			; the result
	mov	si, 6[bp]		; pstr
	mov	ah, 0
ph_loop:
	mov	al, [si]
	cmp	al, 0			; test end of string
	je	ph_loop_end
	cmp	al, '0'			; test digit
	jb	ph_loop_letter
	cmp	al, '9'
	ja	ph_loop_letter
	sub	al, '0'
	jmp	ph_loop_label
ph_loop_letter:
	or	al, 20h			; convert to lowercase
	cmp	al, 'a'			; test letter
	jb	ph_loop_end
	cmp	al, 'f'
	ja	ph_loop_end
	sub	al, 'a' - 10
ph_loop_label:
	shl	dx, cl
	add	dx, ax
	inc	si
	jmp	ph_loop
ph_loop_end:

	mov	bx, 4[bp]
	mov	[bx], dx
	pop	bp
	ret	4

parse_integer:
	; parameters:
	;	pstr	in 6[bp]
	;	pnum	in 4[bp]
	push	bp
	mov	bp, sp

	; skip '-'
	mov	si, 6[bp]
	cmp	byte ptr [si], '-'
	jne	pi_positive
	inc	si
pi_positive:

	; loop
	mov	ax, 0			; the result value
	mov	cx, 10			; multiplier
	mov	bh, 0			; use bx for bl
pi_loop:
	mov	bl, [si]
	cmp	bl, '0'
	jb	pi_loop_end
	cmp	bl, '9'
	ja	pi_loop_end
	sub	bl, '0'
	mul	cx
	add	ax, bx
	inc	si
	jmp	pi_loop
pi_loop_end:

	; negate if needed
	mov	si, 6[bp]
	cmp	byte ptr [si], '-'
	jne	pi_end
	neg	ax

pi_end:
	mov	bx, 4[bp]
	mov	[bx], ax

	pop	bp
	ret	4


to_hex_string:

to_integer_string:

end
