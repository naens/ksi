#+TITLE: Assembly Language Style

* Directory Organization
The directory can contain multiple programs and libraries.  Programs are
code files meant to be translated in an executable.  They can use libraries
by using ~include~ or by linking.  Libraries do not reference other
libraries and do not include files.  If a library needs functions or
constants from another file, the library should be included after that file,
or, in case of linking, the included functions must be marked as external.

** Types of files:
 * ~def~: equates
 * ~lib~: libraries, functions used by programs
 * ~a86~: programs

** Referencing library functions
There are two ways:
 * using ~include~
 * using ~public~ and ~extern~ with a linker

Libraries that use ~include~ can be transformed into libraries that use
a linker by specifying public functions, but the for the opposite to work,
it's possible that identifier and label names have to be changed.

* File Organization
Every file contains a comment that describes it.

All equates should be at the top of the file.  All includes should be at the
end of the file.

** Libraries
Libraries are made of standalone public functions related by their
functionality.  They can use common private functions, but they shouldn't
use common modifiable data.  Functions should not use data that is read
after the call.  It can be kept, but not used.

** Programs
Programs are made of an anonymous ~main~ function and helper functions.  The
main function is the first, other functions follow.

* Function Organization
The organization of the functions is:
 * comment that describes the function
 * data segment variables
 * code segment

* Names
** Libraries
*** Public Names
The library names should be around 4 characters.  The library functions
names are prefixed by the library name and a ~@~.  Function names should
also be short, but can be somewhat longer, around 8 characters.

*** Private Names
In included libraries label and variable names are visible from outside the
library, so they should be short and prefixed by the function name and a
~@~.  For example if a library ~cons~, the function is ~cons@print_hex~, the
labels can be ~cons@print_hex@l1~, ~cons@print_hex@e~.  Helper functions
have a suffix, for example ~cons@print_hex_hlp~

In libraries that use the linker instead of ~include~, the identifier names
do not have to be prefixed with the name of the library.

For programs, the rules are like for linked libraries.  The main function
can declare names without any prefix.

* Comments
The comments at the start of the files and before functions should explain
the abbreviations.

The comment at the start of a library describe the purpose of the library
and list all the public functions with a short description.

The comment before each function should describe what the function does, the
way parameter are passed and returned, and the registers used.  A pseudocode
version of the function, as well as the description of local variables and
the use of registers, can also follow.

Comments inside the code should explain the main parts of the function. 
They should be before the code, with one tab indentation.

Comments after a line of code can explain a difficult part of the code.
