#+TITLE: Assembly Language Style

* Directory Organization
** Files
The directory contains three kinds of source files:
 * ~def~ files, containing constants
 * ~a86~ modules and programs

Programs can use functions defined in libraries.  Module objects
are assembled using RASM-86 and linked with LINK-86.

** Names
The name of a module file is ~<module-name>.a86~, where ~<module-name>~ is
a string of approx. 4 characters.

The program names are longer, approx. 6 characters.

* File Organization
** Comments
All files should have a comment header, explaining the purpose of the
file.  Comments also appear before each public function, describing
its interface and register use.  Comments before private functions can
be shorter.

** Organization
At the top of the file are the equates, followed by external
declarations.  Then follow the functions.

The function organization is as follows:
 * comment
 * dseg, containing local variables
 * cseg, containing the code of the function

The equates and the external declarations used by the function should
be at the beginning of the file.

** Function Comment
Public functions use a public Natural Docs comment containing the
following items:
 * The description of the function
 * Input parameters
 * Returned value(s)
 * Side effects
 * Modified registers.

All function can also have a private comment explaining the algorithm
and how it works in detail.  The pseudocode should normally be
included.

Everything that may be important for the user of the function (such as
risks and unexpected behaviour) should be in the public comment.

Public comments are preceded by ~;;~ and private comments are preceded
by ~;~.  These ~;~ and ~;;~ characters are the first on the string.

** Comments inside functions
There are two kinds of comments inside functions:
 * ~;~ comments preceded by a ~TAB~ character explaining the following
   line(s)
 * ~;~ comments after assembly statement, preceded by one or several
   ~TAB~'s.  These are short comments that explain a more precise
   choice in the implementation.

* Identifier Names

** Public module function:
#+BEGIN_SRC
<module-name>_<function-name>
#+END_SRC

** Private function:
#+BEGIN_SRC
<function-name>
#+END_SRC

** Private global ("static") variables:
#+BEGIN_SRC
<variable-name>
#+END_SRC

** Local variables:
#+BEGIN_SRC
<short-function-name>_<variable-name>
#+END_SRC

** Local labels:
#+BEGIN_SRC
<short-function-name>_<label-name>
#+END_SRC

** Main function labels:
#+BEGIN_SRC
<label-name>
#+END_SRC

** Explanation
 * ~<module-name>~: the name of the module, approx. 4 characters
 * ~<function-name>~: the name of the function, approx. 6 characters
 * ~<variable-name>~: the name of the variable, approx. 4 characters
 * ~<short-function-name>~: the shortened name of the function,
   approx. 3 characters, used for private labels and variables.
   Should be unique in the file.  For example, the /convert file name/,
   ~convfn~ function becomes ~cfn~.
 * ~<label-name>~: the name of the label, approx. 3 characters.
   Functions should not be very long, so the scope of such labels
   should be as local as possible.
